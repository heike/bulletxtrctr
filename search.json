[{"path":"https://heike.github.io/bulletxtrctr/articles/features.html","id":"distance-d","dir":"Articles","previous_headings":"","what":"Distance \\(D\\)","title":"Feature Extraction","text":"Euclidean distance two aligned signatures \\(s\\) \\(t\\) defined \\[ d(s,t) = \\sqrt{\\sum_{=1}^N\\left( s_i - t_i\\right)^2}\\], \\(= 1, ..., N\\), length aligned signatures. Two signatures \\(s\\) \\(t\\) respective lengths \\(n_s\\) \\(n_t\\) can aligned padding one signatures missing values NA. aligned form signatures \\(s\\) \\(t\\) length \\(N \\ge n_s, n_t\\). \\(d\\) measure distance two vectors. Note form \\(d\\) invariant resolution \\(r\\), signatures \\(s\\) \\(t\\) collected. make distance invariant resolution, use \\(d\\cdot r\\) estimate area two signatures. However, cases degraded signatures (.e. cases, reason signature extracted whole land), want also make distance invariant length signatures involved. therefore define \\[D(s,t) = d(s,t)/N\\] average distance aligned signatures \\(s\\) \\(t\\).","code":""},{"path":"https://heike.github.io/bulletxtrctr/articles/features.html","id":"consecutively-matching-striae-cms","dir":"Articles","previous_headings":"","what":"Consecutively matching striae (CMS)","title":"Feature Extraction","text":"Consecutively matching striae measure first established Alfred Biasotti 1950 (reference). number consecutively matching striae number consecutive peaks two signature common, .e. valleys peaks counted. XXX Currently, function extract_feature_cms counts peaks valleys XXX Generally, CMS 6 higher considered strongly indicative match (need another citation ).","code":""},{"path":"https://heike.github.io/bulletxtrctr/articles/features.html","id":"countable-features","dir":"Articles","previous_headings":"","what":"Countable features","title":"Feature Extraction","text":"features return count one way , cms, noncms, matches, nonmatches, … accompanied functions scale integers signature length (make numbers independent length) return values scaled millimeter. corresponding variables appendix _per_mm.","code":""},{"path":"https://heike.github.io/bulletxtrctr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Heike Hofmann. Author, maintainer. Susan Vanderplas. Author. Ju. Author. Ganesh Krishnan. Author. Eric Hare. Contributor. Kiegan Rice. Contributor. Nate Garton. Contributor.","code":""},{"path":"https://heike.github.io/bulletxtrctr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hofmann H, Vanderplas S, Ju W, Krishnan G (2024). bulletxtrctr: Automatic Matching Bullet Striae. R package version 0.2.0.9000, https://heike.github.io/bulletxtrctr/.","code":"@Manual{,   title = {bulletxtrctr: Automatic Matching of Bullet Striae},   author = {Heike Hofmann and Susan Vanderplas and Will Ju and Ganesh Krishnan},   year = {2024},   note = {R package version 0.2.0.9000},   url = {https://heike.github.io/bulletxtrctr/}, }"},{"path":"https://heike.github.io/bulletxtrctr/index.html","id":"bulletxtrctr-","dir":"","previous_headings":"","what":"Automatic Matching of Bullet Striae","title":"Automatic Matching of Bullet Striae","text":"Analyze bullet striations using nonparametric methods","code":""},{"path":"https://heike.github.io/bulletxtrctr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Automatic Matching of Bullet Striae","text":"can install released version bulletxtrctr CRAN : development version GitHub :","code":"install.packages(\"bulletxtrctr\") # install.packages(\"devtools\") devtools::install_github(\"heike/bulletxtrctr\")"},{"path":"https://heike.github.io/bulletxtrctr/index.html","id":"comparing-lands-from-two-bullets","dir":"","previous_headings":"","what":"Comparing lands from two bullets","title":"Automatic Matching of Bullet Striae","text":"Striae comparisons bullets based land--land comparisons. Load libraries bulletxtrctr works x3p files. See package x3ptools https://heike.github.io/x3ptools/ ways convert different file formats x3p standard files. NIST Research Ballistics Toolmarks data base (NRBTD)[https://tsapps.nist.gov/NRBTD/Studies/Search] provides access scans bullets cartridge cases various case studies. tutorial, ’ll work two bullets single barrel Hamby 252 data set. Links 12 scans bullet lands x3p format provided hamby252demo object. commands read bullets directly NRBTD repository, without downloading files working directory: Instead, also download files folder named “data” working directory. shown sequence commands : Combine results single data frame: expect data recorded micron level. scans posted give measurements meters: Change measurements microns: Save resolution scans variable (using piece information later: working assumption scans aligned base bullet bottom (y = 0) image, land engraved area displayed left right groove groove, .e. assuming (0,0) bottom left corner image. scans adjustment made barrel’s twist (recommended) twist visible image.  raw scan needs flipped heel along bottom image rather along left hand side. Scan transformation: clear right twist visible right slant striae grooves:  Get ideal cross sections Visualize cross cuts:  Note rather strange cross cut land 6 bullet 1. can look scan - find quite pronounced tank rash. However, extraction land height 375, much affected rash base bullet top scanning area. Scan land 6 bullet 1. land affected quite pronounced tank rash:  Get groove locations Visualize grooves identified correctly (least enough distort final result):  Extract signatures  Align signatures extract features Aligned signatures two matching lands:  features based aligned signatures: features need evaluation striation marks two aligned signatures: Extract Features  Get Score predictions land land comparison  Determine bullet--bullet scores Use bullet--bullet scores predict land land scores  interactive interface comparisons available https://oaiti.org/apps/bulletmatcher/","code":"library(dplyr) library(bulletxtrctr) library(x3ptools) library(randomForest) library(ggplot2) library(readr) library(nbtrd) # devtools::install_github(\"csafe-isu/nbtrd\") b1 <- read_bullet(urllist = hamby252demo[[1]]) b2 <- read_bullet(urllist = hamby252demo[[2]]) if (!dir.exists(\"README_files/data\")) {   dir.create(\"README_files/data\") } if (!file.exists(\"README_files/data/Bullet1/Hamby252_Barrel1_Bullet1_Land1.x3p\")) {   NRBTDsample_download(\"README_files/data\") } b1 <- read_bullet(\"README_files/data/Bullet1\") #> 6 files found. Reading ... b2 <- read_bullet(\"README_files/data/Bullet2\") #> 6 files found. Reading ... b1$bullet <- 1 b2$bullet <- 2 b1$land <- 1:6 b2$land <- 1:6 bullets <- rbind(b1, b2) bullets$x3p[[1]] %>% x3p_get_scale() #> [1] 1.5625e-06  summary(as.vector(bullets$x3p[[1]]$surface.matrix)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>       0       0       0       0       0       0   24829 bullets <- bullets %>% mutate(   x3p = x3p %>% purrr::map(.f = x3p_m_to_mum) ) bullets$x3p[[1]] %>% x3p_get_scale() #> [1] 1.5625  summary(as.vector(bullets$x3p[[1]]$surface.matrix)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   1.513 117.626 166.723 155.933 199.429 216.341   24829 resolution <- bullets$x3p[[1]] %>% x3p_get_scale() resolution #> [1] 1.5625 image_x3p(bullets$x3p[[1]], file = \"man/figures/temp-before.png\") # turn the scans such that (0,0) is bottom left bullets <- bullets %>% mutate(   x3p = x3p %>% purrr::map(.f = function(x) x %>%                               rotate_x3p(angle = -90) %>%                              y_flip_x3p()) ) image_x3p(bullets$x3p[[1]], file = \"man/figures/temp-after.png\") bullets <- bullets %>% mutate(   crosscut = x3p %>% purrr::map_dbl(.f = x3p_crosscut_optimize) ) # now extract the crosscuts bullets <- bullets %>% mutate(   ccdata = purrr::map2(.x = x3p, .y = crosscut,                         .f = x3p_crosscut) ) crosscuts <- bullets %>% tidyr::unnest(ccdata) crosscuts %>%    ggplot(aes(x = x, y = value)) +    geom_line() +   facet_grid(bullet~land, labeller=\"label_both\") +   theme_bw() filter(bullets, land==6, bullet==1)$x3p[[1]] %>%   x3p_add_hline(yintercept = 375, size = 10, color = \"#e6bf98\") %>%    image_x3p(file=\"man/figures/bullet1-land6.png\") bullets <- bullets %>% mutate(   grooves = ccdata %>%      purrr::map(.f = cc_locate_grooves, method = \"middle\",                 adjust = 30, return_plot = TRUE) ) gridExtra::grid.arrange(   bullets$grooves[[1]]$plot, bullets$grooves[[2]]$plot,   bullets$grooves[[3]]$plot, bullets$grooves[[4]]$plot,   bullets$grooves[[5]]$plot, bullets$grooves[[6]]$plot,   bullets$grooves[[7]]$plot, bullets$grooves[[8]]$plot,   bullets$grooves[[9]]$plot, bullets$grooves[[10]]$plot,   bullets$grooves[[11]]$plot, bullets$grooves[[12]]$plot,   ncol = 6 ) bullets <- bullets %>% mutate(   sigs = purrr::map2(     .x = ccdata, .y = grooves,      .f = function(x, y) {       cc_get_signature(         ccdata = x, grooves = y, span1 = 0.75, span2 = 0.03)     }) ) signatures <- bullets %>%    select(source, sigs) %>% tidyr::unnest(sigs) signatures %>%    filter(!is.na(sig),!is.na(raw_sig)) %>%   ggplot(aes(x = x)) +    geom_line(aes(y = raw_sig), colour = \"grey70\") +   geom_line(aes(y = sig), colour = \"grey30\") +   facet_wrap(~source, ncol = 6) +   ylim(c(-5,5)) +   theme_bw() bullets$bulletland <- paste0(bullets$bullet,\"-\", bullets$land) lands <- unique(bullets$bulletland) comparisons <- data.frame(   expand.grid(land1 = lands, land2 = lands), stringsAsFactors = FALSE)  comparisons <- comparisons %>% mutate(   aligned = purrr::map2(.x = land1, .y = land2, .f = function(xx, yy) {     land1 <- bullets$sigs[bullets$bulletland == xx][[1]]     land2 <- bullets$sigs[bullets$bulletland == yy][[1]]     land1$bullet <- \"first-land\"     land2$bullet <- \"second-land\"          sig_align(land1$sig, land2$sig)   }) ) subset(comparisons, land1==\"2-4\" & land2 ==\"1-2\")$aligned[[1]]$lands %>%    tidyr::gather(sigs, value, sig1, sig2) %>%    ggplot(aes(x = x, y = value, colour = sigs)) +      geom_line() +   theme_bw() +   scale_color_brewer(palette = \"Dark2\") #> Warning: Removed 36 rows containing missing values (`geom_line()`). comparisons <- comparisons %>% mutate(   ccf0 = aligned %>%      purrr::map_dbl(.f = function(x) extract_feature_ccf(x$lands)),   lag0 = aligned %>%      purrr::map_dbl(.f = function(x) extract_feature_lag(x$lands)),   D0 = aligned %>%      purrr::map_dbl(.f = function(x) extract_feature_D(x$lands)),   length0 = aligned %>%      purrr::map_dbl(.f = function(x) extract_feature_length(x$lands)),   overlap0 = aligned %>%      purrr::map_dbl(.f = function(x) extract_feature_overlap(x$lands)) ) comparisons <- comparisons %>% mutate(   striae = aligned %>% purrr::map(.f = sig_cms_max, span = 75)  ) comparisons <- comparisons %>% mutate(   cms_per_mm = purrr::map2(striae, aligned, .f = function(s, a) {     extract_feature_cms_per_mm(s$lines, a$lands, resolution=resolution)   }),   matches0 = striae %>% purrr::map_dbl(.f = function(s) {     bulletxtrctr:::extract_helper_feature_n_striae(s$lines, type = \"peak\", match = TRUE)   }),   mismatches0 = striae %>% purrr::map_dbl(.f = function(s) {     bulletxtrctr:::extract_helper_feature_n_striae(s$lines, type = \"peak\", match = FALSE)   })    ) comparisons <- comparisons %>% mutate(   bulletA = gsub(\"([1-2])-([1-6])\",\"\\\\1\",land1),   bulletB = gsub(\"([1-2])-([1-6])\",\"\\\\1\",land2),   landA = gsub(\"([1-2])-([1-6])\",\"\\\\2\",land1),   landB = gsub(\"([1-2])-([1-6])\",\"\\\\2\",land2) ) comparisons <- comparisons %>% mutate(   features = purrr::map2(.x = aligned, .y = striae, .f = extract_features_all, resolution = resolution) )  comparisons <- comparisons %>% mutate(   legacy_features = purrr::map(striae, extract_features_all_legacy, resolution = resolution) )  legacy <- comparisons %>% tidyr::unnest(legacy_features)  # scale features before using them in the random forest, legacy features can be used out of the box  features <- comparisons %>%    select(land1, land2, ccf0, bulletA, bulletB, landA, landB, features) %>%   tidyr::unnest(features)    # quick visualization: features %>%    ggplot(aes(x = landA, y = landB, fill = ccf)) +   geom_tile() +   scale_fill_gradient2(low = \"grey80\", high = \"darkorange\",                         midpoint = 0.5) +   facet_grid(bulletB~bulletA, labeller = \"label_both\") +   xlab(\"Land A\") +   ylab(\"Land B\") +   theme(aspect.ratio = 1) require(randomForest) # use the scaled features, but the unscaled names ... features <- features %>% mutate(   cms = cms_per_mm,   matches = matches_per_mm,   mismatches = mismatches_per_mm,   non_cms = non_cms_per_mm   ) features$rfscore <- predict(rtrees, newdata = features, type = \"prob\")[,2]  features %>%    ggplot(aes(x = landA, y = landB, fill = rfscore)) +   geom_tile() +   scale_fill_gradient2(low = \"grey80\", high = \"darkorange\",                         midpoint = .5) +   facet_grid(bulletB~bulletA, labeller = \"label_both\") +   xlab(\"Land A\") +   ylab(\"Land B\") +   theme(aspect.ratio = 1) bullet_scores <- features %>% group_by(bulletA, bulletB) %>% tidyr::nest() bullet_scores <- bullet_scores %>% mutate(   bullet_score = data %>% purrr::map_dbl(     .f = function(d) max(compute_average_scores(land1 = d$landA, land2 = d$landB, d$rfscore))) ) bullet_scores %>% select(-data) #> # A tibble: 4 × 3 #> # Groups:   bulletA, bulletB [4] #>   bulletA bulletB bullet_score #>   <chr>   <chr>          <dbl> #> 1 1       1              0.977 #> 2 2       1              0.648 #> 3 1       2              0.648 #> 4 2       2              0.977 bullet_scores <- bullet_scores %>% mutate(   data = data %>% purrr::map(     .f = function(d) {       d$samesource = bullet_to_land_predict(         land1 = d$landA, land2 = d$landB,          d$rfscore, difference=0.1)       d     }) ) features <- bullet_scores %>% tidyr::unnest(data) features %>%    ggplot(aes(x = landA, y = landB,               fill = rfscore, colour=samesource)) +   geom_tile() +   scale_fill_gradient2(low = \"grey80\", high = \"darkorange\",                         midpoint = .5) +   scale_colour_manual(values = c(\"grey80\", \"darkorange\")) +   geom_tile(size = 1,              data = features %>% filter(samesource)) +   facet_grid(bulletB~bulletA, labeller = \"label_both\") +   xlab(\"Land A\") +   ylab(\"Land B\") +   theme(aspect.ratio = 1)  #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead."},{"path":"https://heike.github.io/bulletxtrctr/reference/bootstrap_k.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: bootstrap scores — bootstrap_k","title":"Helper function: bootstrap scores — bootstrap_k","text":"Helper function: bootstrap scores","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/bootstrap_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: bootstrap scores — bootstrap_k","text":"","code":"bootstrap_k(scores, k, K, value)"},{"path":"https://heike.github.io/bulletxtrctr/reference/bootstrap_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function: bootstrap scores — bootstrap_k","text":"scores numeric values scores k number lands average across K number replicates value observed value","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/br411.html","id":null,"dir":"Reference","previous_headings":"","what":"3d topological surface measurements for one land of a bullet from the Hamby study — br411","title":"3d topological surface measurements for one land of a bullet from the Hamby study — br411","text":"3d topographic surface map Land 1 Bullet 1 Barrel 4 (Hamby study 252). file stored x3p format (ISO standard forensic measurements).","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/br411.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3d topological surface measurements for one land of a bullet from the Hamby study — br411","text":"","code":"br411"},{"path":"https://heike.github.io/bulletxtrctr/reference/br411.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"3d topological surface measurements for one land of a bullet from the Hamby study — br411","text":"x3p object (list) 5 elements header.info list consisting scan dimensions scan resolution (microns per pixel) surface.matrix 2d numeric matrix scan heights. feature.info list containing scanning details x3p formatting general.info list containing instrumentation details matrix.info list technical details matrix encoding","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/bullet_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper file to setup data — bullet_pipeline","title":"Helper file to setup data — bullet_pipeline","text":"Helper file setup data","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/bullet_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper file to setup data — bullet_pipeline","text":"","code":"bullet_pipeline(location, stop_at_step = NULL, x3p_clean = function(x) x, ...)"},{"path":"https://heike.github.io/bulletxtrctr/reference/bullet_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper file to setup data — bullet_pipeline","text":"location directory list urls containing x3p files. sub-directories sub-lists, function assume sub-directory contains lands different bullets separate accordingly stop_at_step One read, clean, crosscut, grooves, signatures x3p_clean function use clean x3p file - convert header info correct units, rotate surface matrix, etc. ... additional arguments cc_locate_grooves cc_get_signature","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/bullet_pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper file to setup data — bullet_pipeline","text":"data_frame bullet x3p files processed data steps","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/bullet_to_land_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Get land to land prediction based on bullet to bullet comparisons — bullet_to_land_predict","title":"Get land to land prediction based on bullet to bullet comparisons — bullet_to_land_predict","text":"combination land1 land2 key scores, .e. bullet six lands, input vectors length 36.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/bullet_to_land_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get land to land prediction based on bullet to bullet comparisons — bullet_to_land_predict","text":"","code":"bullet_to_land_predict(   land1,   land2,   scores,   difference,   alpha = 0.05,   addNA = FALSE )"},{"path":"https://heike.github.io/bulletxtrctr/reference/bullet_to_land_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get land to land prediction based on bullet to bullet comparisons — bullet_to_land_predict","text":"land1 (numeric) vector land ids bullet 1 land2 (numeric) vector land ids bullet 2 scores numeric vector scores summarized single number difference numeric value describing minimal difference scores source versus different sources. alpha numeric value describing significance level bootstrap addNA missing values treated? addNA = TRUE leaves missing values, addNA=FALSE imputes 0.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/bullet_to_land_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get land to land prediction based on bullet to bullet comparisons — bullet_to_land_predict","text":"numeric vector binary prediction whether two lands -source. Vector length input vectors.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_fit_gaussian.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a gaussian filter on bullet data frame — cc_fit_gaussian","title":"Use a gaussian filter on bullet data frame — cc_fit_gaussian","text":"gaussian filter fit surface measurements residuals calculated. extreme 0.25\\ result called raw signature bullet land.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_fit_gaussian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a gaussian filter on bullet data frame — cc_fit_gaussian","text":"","code":"cc_fit_gaussian(ccdata, span = 600)"},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_fit_gaussian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a gaussian filter on bullet data frame — cc_fit_gaussian","text":"ccdata crosscut returned x3p_to_df span size, microns, smoothing window. Defaults 600, 24\\ 9mm land.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_fit_gaussian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a gaussian filter on bullet data frame — cc_fit_gaussian","text":"list data frame original bullet measurements extended gaussian filtration, residuals, two plots: plot fit, plot bullet's land signature.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_fit_gaussian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a gaussian filter on bullet data frame — cc_fit_gaussian","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union ccdata <- data_frame(   x = seq(0, 6000, 1),   value = 10 - (3 - x / 1000)^2 + rnorm(length(x), sd = .25) ) #> Warning: `data_frame()` was deprecated in tibble 1.1.0. #> ℹ Please use `tibble()` instead. cc_fit_gaussian(ccdata = ccdata) #> # A tibble: 6,001 × 7 #>        x value fitted raw_sig se    abs_resid chop  #>    <dbl> <dbl>  <dbl>   <dbl> <lgl>     <dbl> <lgl> #>  1     0 0.650   1.55  -0.901 NA        0.901 TRUE  #>  2     1 1.07    1.55  -0.483 NA        0.483 FALSE #>  3     2 0.403   1.56  -1.15  NA        1.15  TRUE  #>  4     3 1.02    1.56  -0.541 NA        0.541 FALSE #>  5     4 1.18    1.56  -0.381 NA        0.381 FALSE #>  6     5 1.32    1.56  -0.245 NA        0.245 FALSE #>  7     6 0.581   1.56  -0.984 NA        0.984 TRUE  #>  8     7 0.980   1.57  -0.587 NA        0.587 FALSE #>  9     8 0.987   1.57  -0.583 NA        0.583 FALSE #> 10     9 0.983   1.57  -0.589 NA        0.589 FALSE #> # ℹ 5,991 more rows"},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_fit_loess.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a loess curve to a bullet data frame — cc_fit_loess","title":"Fit a loess curve to a bullet data frame — cc_fit_loess","text":"loess regression fit surface measurements residuals calculated. extreme 0.25% residuals filtered consideration. result called raw signature bullet land. Adapted fit_loess bulletr","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_fit_loess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a loess curve to a bullet data frame — cc_fit_loess","text":"","code":"cc_fit_loess(ccdata, span = 0.75)"},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_fit_loess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a loess curve to a bullet data frame — cc_fit_loess","text":"ccdata crosscut returned x3p_to_df, grooves need removed ahead time span span use loess regression","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_fit_loess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a loess curve to a bullet data frame — cc_fit_loess","text":"list data frame original bullet measurements extended loess fit, residuals, standard errors two plots: plot fit, plot bullet's land signature.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_fit_loess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a loess curve to a bullet data frame — cc_fit_loess","text":"","code":"library(dplyr) ccdata <- data_frame(   x = seq(0, 6, .001),   value = 10 - (3 - x)^2 + rnorm(length(x), sd = .25) ) cc_fit_loess(ccdata = ccdata) #> # A tibble: 6,001 × 7 #>        x value fitted  raw_sig     se abs_resid chop  #>    <dbl> <dbl>  <dbl>    <dbl>  <dbl>     <dbl> <lgl> #>  1 0     0.462   1.01 -0.549   0.0123   0.549   FALSE #>  2 0.001 0.788   1.02 -0.228   0.0123   0.228   FALSE #>  3 0.002 0.997   1.02 -0.0259  0.0123   0.0259  FALSE #>  4 0.003 0.567   1.03 -0.462   0.0123   0.462   FALSE #>  5 0.004 1.30    1.03  0.270   0.0122   0.270   FALSE #>  6 0.005 0.764   1.04 -0.277   0.0122   0.277   FALSE #>  7 0.006 0.824   1.05 -0.222   0.0122   0.222   FALSE #>  8 0.007 0.842   1.05 -0.211   0.0122   0.211   FALSE #>  9 0.008 1.06    1.06 -0.00254 0.0122   0.00254 FALSE #> 10 0.009 0.733   1.06 -0.331   0.0122   0.331   FALSE #> # ℹ 5,991 more rows"},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_get_signature.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract signature from crosscut — cc_get_signature","title":"Extract signature from crosscut — cc_get_signature","text":"x3p file 3d topological bullet surface processed surface crosscut y, measurements outside bullet grooves crosscuts left , loess smooth used (see ?loess details) remove big structure.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_get_signature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract signature from crosscut — cc_get_signature","text":"","code":"cc_get_signature(ccdata, grooves = NULL, span1 = 0.75, span2 = 0.03)"},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_get_signature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract signature from crosscut — cc_get_signature","text":"ccdata crosscut returned x3p_crosscut grooves grooves use two element vector, desired span1 span loess fit get profile raw signature span2 span loess fit smooth raw signature; span2 set NA, second smoothing done.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_get_signature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract signature from crosscut — cc_get_signature","text":"data frame","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_get_signature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract signature from crosscut — cc_get_signature","text":"","code":"data(br411) cc <- x3p_crosscut_optimize(br411) ccdata <- x3p_crosscut(br411, cc) grooves <- cc_locate_grooves(ccdata) signature <- cc_get_signature(ccdata, grooves)  if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(Bullet1 = c(hamby252demo$bullet1[3])),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  cc_get_signature(example_data$ccdata[[1]],                  example_data$grooves[[1]]) %>% head() }"},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_locate_grooves.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the grooves of a bullet land — cc_locate_grooves","title":"Find the grooves of a bullet land — cc_locate_grooves","text":"Find grooves bullet land","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_locate_grooves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the grooves of a bullet land — cc_locate_grooves","text":"","code":"cc_locate_grooves(   ccdata,   method = \"rollapply\",   smoothfactor = 15,   adjust = 10,   groove_cutoff = 400,   mean_left = NULL,   mean_right = NULL,   mean_window = 100,   return_plot = F,   ... )"},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_locate_grooves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the grooves of a bullet land — cc_locate_grooves","text":"ccdata data frame crosscut. Data frame needs location x measured values value. multiple crosscuts considered, include variable y use key. method method use identifying grooves. One \"quadratic\", \"rollapply\", \"middle\", \"logisticlegacy\", \"lassobasic\", \"lassofull\", \"bcp\". Defaults \"rollapply\" smoothfactor smoothing window use - XXX smoothing window seems depend resolution data collected. adjust positive number adjust grooves - XXX expressed microns rather index (used method = \"middle\") groove_cutoff index groove exist past - XXX parameter expressed microns rather index able properly deal different resolutions mean_left provided, location average left groove mean_right provided, location average right groove mean_window window around means use return_plot Return plot grooves? ... parameters passed specific groove location methods","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/cc_locate_grooves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the grooves of a bullet land — cc_locate_grooves","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(Bullet1 = c(hamby252demo$bullet1[3])),   stop_at_step = \"crosscut\",   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  cc_locate_grooves(example_data$ccdata[[1]],   method = \"rollapply\",   adjust = 30, return_plot = T ) cc_locate_grooves(example_data$ccdata[[1]],   method = \"middle\",   adjust = 30, return_plot = T ) cc_locate_grooves(example_data$ccdata[[1]],   method = \"quadratic\",   adjust = 30, return_plot = T ) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/check_align.html","id":null,"dir":"Reference","previous_headings":"","what":"Check align output — check_align","title":"Check align output — check_align","text":"Check align output","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_align.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check align output — check_align","text":"","code":"check_align(x)"},{"path":"https://heike.github.io/bulletxtrctr/reference/check_align.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check align output — check_align","text":"x output sig_align","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_align.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check align output — check_align","text":"TRUE error","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_ccdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Check object returned by x3p_crosscut_optimize — check_ccdata","title":"Check object returned by x3p_crosscut_optimize — check_ccdata","text":"Check object returned x3p_crosscut_optimize","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_ccdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check object returned by x3p_crosscut_optimize — check_ccdata","text":"","code":"check_ccdata(x)"},{"path":"https://heike.github.io/bulletxtrctr/reference/check_ccdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check object returned by x3p_crosscut_optimize — check_ccdata","text":"x data frame x3p_crosscut_optimize","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_ccdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check object returned by x3p_crosscut_optimize — check_ccdata","text":"TRUE everything ok, error otherwise","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_grooves.html","id":null,"dir":"Reference","previous_headings":"","what":"Check grooves for correctness — check_grooves","title":"Check grooves for correctness — check_grooves","text":"Check grooves correctness","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_grooves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check grooves for correctness — check_grooves","text":"","code":"check_grooves(x)"},{"path":"https://heike.github.io/bulletxtrctr/reference/check_grooves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check grooves for correctness — check_grooves","text":"x output cc_locate_grooves","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_grooves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check grooves for correctness — check_grooves","text":"TRUE ok, error otherwise","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_loess_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Check loess or gaussian curve fit object — check_loess_fit","title":"Check loess or gaussian curve fit object — check_loess_fit","text":"Check loess gaussian curve fit object","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_loess_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check loess or gaussian curve fit object — check_loess_fit","text":"","code":"check_loess_fit(x)"},{"path":"https://heike.github.io/bulletxtrctr/reference/check_loess_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check loess or gaussian curve fit object — check_loess_fit","text":"x output cc_fit_loess cc_fit_gaussian","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_loess_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check loess or gaussian curve fit object — check_loess_fit","text":"TRUE error","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_sig.html","id":null,"dir":"Reference","previous_headings":"","what":"Check signature object — check_sig","title":"Check signature object — check_sig","text":"Check signature object","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_sig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check signature object — check_sig","text":"","code":"check_sig(x)"},{"path":"https://heike.github.io/bulletxtrctr/reference/check_sig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check signature object — check_sig","text":"x output cc_get_signature","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_sig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check signature object — check_sig","text":"TRUE error","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_striae.html","id":null,"dir":"Reference","previous_headings":"","what":"Check a striae object is valid — check_striae","title":"Check a striae object is valid — check_striae","text":"Check striae object valid","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_striae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check a striae object is valid — check_striae","text":"","code":"check_striae(striae)"},{"path":"https://heike.github.io/bulletxtrctr/reference/check_striae.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check a striae object is valid — check_striae","text":"striae data frame striae object","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_striae.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check a striae object is valid — check_striae","text":"TRUE conditions met, error otherwise","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_x3p.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether an x3p argument is character or filename, return an x3p object — check_x3p","title":"Check whether an x3p argument is character or filename, return an x3p object — check_x3p","text":"Check whether x3p argument character filename, return x3p object","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/check_x3p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether an x3p argument is character or filename, return an x3p object — check_x3p","text":"","code":"check_x3p(x3p)"},{"path":"https://heike.github.io/bulletxtrctr/reference/check_x3p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether an x3p argument is character or filename, return an x3p object — check_x3p","text":"x3p character, path x3p file. Otherwise scan x3p format expected.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/compute_average_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Get average scores for bullet to bullet comparisons — compute_average_scores","title":"Get average scores for bullet to bullet comparisons — compute_average_scores","text":"Note combination land1 land2 key scores, .e. bullet six lands, input vectors length 36.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/compute_average_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get average scores for bullet to bullet comparisons — compute_average_scores","text":"","code":"compute_average_scores(land1, land2, score, addNA = FALSE)"},{"path":"https://heike.github.io/bulletxtrctr/reference/compute_average_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get average scores for bullet to bullet comparisons — compute_average_scores","text":"land1 (numeric) vector land ids bullet 1 land2 (numeric) vector land ids bullet 2 score numeric vector scores summarized single number addNA logical value. case missing lands, scores set 0 (addNA = FALSE) set NA (addNA = TRUE)","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/compute_average_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get average scores for bullet to bullet comparisons — compute_average_scores","text":"numeric vector average scores. Length number land engraved areas bullets.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/compute_average_scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get average scores for bullet to bullet comparisons — compute_average_scores","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  bullets <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1),     Bullet2 = c(hamby252demo$bullet2)   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() ) %>% mutate(land = paste0(rep(1:2, each = 6), \"-\", rep(1:6, times = 2)))  comparisons <- data.frame(   expand.grid(land1 = bullets$land, land2 = bullets$land),   stringsAsFactors = FALSE) comparisons <- comparisons %>%   mutate(     aligned = purrr::map2(.x = land1, .y = land2, .f = function(xx, yy) {       land1 <- bullets$sigs[bullets$land == xx][[1]]       land2 <- bullets$sigs[bullets$land == yy][[1]]       land1$bullet <- \"first-land\"       land2$bullet <- \"second-land\"        sig_align(land1$sig, land2$sig)     }),     striae = purrr::map(aligned, sig_cms_max),     features = purrr::map2(.x = aligned, .y = striae, extract_features_all),     rfscore = purrr::map_dbl(features, rowMeans) # This is a hack until the new RF is fit...   )  # Clean up a bit comparisons <- comparisons %>%   mutate(     bulletA = gsub(\"(\\\\d)-\\\\d\", \"\\\\1\", land1),     landA = gsub(\"\\\\d-(\\\\d)\", \"\\\\1\", land1),     bulletB = gsub(\"(\\\\d)-\\\\d\", \"\\\\1\", land2),     landB = gsub(\"\\\\d-(\\\\d)\", \"\\\\1\", land2)   ) %>%   group_by(bulletA, bulletB) %>% tidyr::nest() %>%   mutate(     bullet_score = data %>% purrr::map_dbl(       .f = function(d) max(compute_average_scores(land1 = d$landA,                                                   land2 = d$landB,                                                   d$rfscore)))   ) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_D.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract average distance between two (or more) aligned signatures — extract_feature_D","title":"Extract average distance between two (or more) aligned signatures — extract_feature_D","text":"Extract average distance two () aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract average distance between two (or more) aligned signatures — extract_feature_D","text":"","code":"extract_feature_D(aligned, ...)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract average distance between two (or more) aligned signatures — extract_feature_D","text":"aligned data frame variable x (location) two measurements (bullets entry list returned sig_align) ... arguments function dist","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract average distance between two (or more) aligned signatures — extract_feature_D","text":"object class distance","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract average distance between two (or more) aligned signatures — extract_feature_D","text":"","code":"if (FALSE) { library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig)  extract_feature_D(alignment$lands) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_ccf.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract ccf from two (or more) aligned signatures — extract_feature_ccf","title":"Extract ccf from two (or more) aligned signatures — extract_feature_ccf","text":"Extract ccf two () aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_ccf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract ccf from two (or more) aligned signatures — extract_feature_ccf","text":"","code":"extract_feature_ccf(aligned)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_ccf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract ccf from two (or more) aligned signatures — extract_feature_ccf","text":"aligned data frame variable x (location) two measurements (bullets entry list returned sig_align)","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_ccf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract ccf from two (or more) aligned signatures — extract_feature_ccf","text":"(matrix) correlations","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_ccf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract ccf from two (or more) aligned signatures — extract_feature_ccf","text":"","code":"if (FALSE) { library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig)  extract_feature_ccf(alignment$lands) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract number of consecutively matching striation marks (peaks and valleys) from two aligned signatures — extract_feature_cms","title":"Extract number of consecutively matching striation marks (peaks and valleys) from two aligned signatures — extract_feature_cms","text":"Extract number consecutively matching striation marks (peaks valleys) two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract number of consecutively matching striation marks (peaks and valleys) from two aligned signatures — extract_feature_cms","text":"","code":"extract_feature_cms(striae)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract number of consecutively matching striation marks (peaks and valleys) from two aligned signatures — extract_feature_cms","text":"striae data frame striation marks based two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract number of consecutively matching striation marks (peaks and valleys) from two aligned signatures — extract_feature_cms","text":"number consecutively matching striation marks (peaks valleys)","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract number of consecutively matching striation marks (peaks and valleys) from two aligned signatures — extract_feature_cms","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig) striae <- sig_cms_max(alignment) extract_feature_cms(striae$lines) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms2.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract number of consecutively matching elevated striation marks from two aligned signatures — extract_feature_cms2","title":"Extract number of consecutively matching elevated striation marks from two aligned signatures — extract_feature_cms2","text":"Extract number consecutively matching elevated striation marks two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract number of consecutively matching elevated striation marks from two aligned signatures — extract_feature_cms2","text":"","code":"extract_feature_cms2(striae)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract number of consecutively matching elevated striation marks from two aligned signatures — extract_feature_cms2","text":"striae data frame striation marks based two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract number of consecutively matching elevated striation marks from two aligned signatures — extract_feature_cms2","text":"number consecutively matching elevated striation marks","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract number of consecutively matching elevated striation marks from two aligned signatures — extract_feature_cms2","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig) striae <- sig_cms_max(alignment) extract_feature_cms2(striae$lines) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms2_per_mm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract scaled number of consecutively matching elevated striation marks from two aligned signatures — extract_feature_cms2_per_mm","title":"Extract scaled number of consecutively matching elevated striation marks from two aligned signatures — extract_feature_cms2_per_mm","text":"Extract scaled number consecutively matching elevated striation marks two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms2_per_mm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract scaled number of consecutively matching elevated striation marks from two aligned signatures — extract_feature_cms2_per_mm","text":"","code":"extract_feature_cms2_per_mm(striae, aligned, resolution)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms2_per_mm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract scaled number of consecutively matching elevated striation marks from two aligned signatures — extract_feature_cms2_per_mm","text":"striae data frame striation marks based two aligned signatures aligned two aligned signatures resolution micron per pixel resolution","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms2_per_mm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract scaled number of consecutively matching elevated striation marks from two aligned signatures — extract_feature_cms2_per_mm","text":"scaled number consecutively matching elevated striation marks per millimeter","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms2_per_mm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract scaled number of consecutively matching elevated striation marks from two aligned signatures — extract_feature_cms2_per_mm","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig) striae <- sig_cms_max(alignment) extract_feature_cms2_per_mm(striae$lines) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms_per_mm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract scaled number of consecutively matching striation marks (peaks and valleys) from two aligned signatures — extract_feature_cms_per_mm","title":"Extract scaled number of consecutively matching striation marks (peaks and valleys) from two aligned signatures — extract_feature_cms_per_mm","text":"Extract scaled number consecutively matching striation marks (peaks valleys) two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms_per_mm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract scaled number of consecutively matching striation marks (peaks and valleys) from two aligned signatures — extract_feature_cms_per_mm","text":"","code":"extract_feature_cms_per_mm(striae, aligned, resolution)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms_per_mm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract scaled number of consecutively matching striation marks (peaks and valleys) from two aligned signatures — extract_feature_cms_per_mm","text":"striae data frame striation marks based two aligned signatures aligned two aligned signatures resolution micron per pixel resolution","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms_per_mm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract scaled number of consecutively matching striation marks (peaks and valleys) from two aligned signatures — extract_feature_cms_per_mm","text":"scaled number consecutively matching striation marks (peaks valleys)","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_cms_per_mm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract scaled number of consecutively matching striation marks (peaks and valleys) from two aligned signatures — extract_feature_cms_per_mm","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig) striae <- sig_cms_max(alignment) extract_feature_cms(striae$lines) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_lag.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract lag from two (or more) aligned signatures — extract_feature_lag","title":"Extract lag from two (or more) aligned signatures — extract_feature_lag","text":"case two signatures result integer definining number indices second signature shifted compared first signature alignment. Note lag can negative. case multiple signatures result vector non-negative integers length signatures. element gives number indices corresponding signature shifted compared first signature. definition, one numbers 0 indicating first signature. XXX Need indicate \"first\" col index","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_lag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract lag from two (or more) aligned signatures — extract_feature_lag","text":"","code":"extract_feature_lag(aligned)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_lag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract lag from two (or more) aligned signatures — extract_feature_lag","text":"aligned data frame variable x (location) two measurements (bullets entry list returned sig_align)","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_lag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract lag from two (or more) aligned signatures — extract_feature_lag","text":"(vector) lags","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_lag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract lag from two (or more) aligned signatures — extract_feature_lag","text":"","code":"if (FALSE) { library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig)  extract_feature_lag(alignment$lands) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_lag_mm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract lag in mm from two (or more) aligned signatures — extract_feature_lag_mm","title":"Extract lag in mm from two (or more) aligned signatures — extract_feature_lag_mm","text":"Extract lag mm two () aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_lag_mm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract lag in mm from two (or more) aligned signatures — extract_feature_lag_mm","text":"","code":"extract_feature_lag_mm(aligned, resolution)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_lag_mm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract lag in mm from two (or more) aligned signatures — extract_feature_lag_mm","text":"aligned data frame variable x (location) two measurements (bullets entry list returned sig_align) resolution numeric value resolution micron per pixel","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_lag_mm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract lag in mm from two (or more) aligned signatures — extract_feature_lag_mm","text":"(vector) lags millimeter","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_left_cms.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract number of consecutively matching elevated striation marks from the left of two aligned signatures — extract_feature_left_cms","title":"Extract number of consecutively matching elevated striation marks from the left of two aligned signatures — extract_feature_left_cms","text":"Extract number consecutively matching elevated striation marks left two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_left_cms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract number of consecutively matching elevated striation marks from the left of two aligned signatures — extract_feature_left_cms","text":"","code":"extract_feature_left_cms(striae)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_left_cms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract number of consecutively matching elevated striation marks from the left of two aligned signatures — extract_feature_left_cms","text":"striae data frame striation marks based two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_left_cms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract number of consecutively matching elevated striation marks from the left of two aligned signatures — extract_feature_left_cms","text":"number consecutively matching striation marks (left)","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_left_cms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract number of consecutively matching elevated striation marks from the left of two aligned signatures — extract_feature_left_cms","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig) striae <- sig_cms_max(alignment) extract_feature_left_cms(striae$lines) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract length of two (aligned) signatures — extract_feature_length","title":"Extract length of two (aligned) signatures — extract_feature_length","text":"Signatures usually different lengths. comparison, length shorter signature represents potential length match.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract length of two (aligned) signatures — extract_feature_length","text":"","code":"extract_feature_length(aligned)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract length of two (aligned) signatures — extract_feature_length","text":"aligned data frame variable x (location) two measurements (bullets entry list returned sig_align)","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract length of two (aligned) signatures — extract_feature_length","text":"integer value length shorter signature.","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract length of two (aligned) signatures — extract_feature_length","text":"","code":"if (FALSE) { library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig)  extract_feature_length(alignment$lands) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_length_mm.html","id":null,"dir":"Reference","previous_headings":"","what":"Length of two (aligned) signatures in millimeter — extract_feature_length_mm","title":"Length of two (aligned) signatures in millimeter — extract_feature_length_mm","text":"Signatures usually different lengths. comparison, length shorter signature represents potential length match.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_length_mm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length of two (aligned) signatures in millimeter — extract_feature_length_mm","text":"","code":"extract_feature_length_mm(aligned, resolution)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_length_mm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length of two (aligned) signatures in millimeter — extract_feature_length_mm","text":"aligned data frame variable x (location) two measurements (bullets entry list returned sig_align) resolution micron per pixel resolution","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_length_mm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of two (aligned) signatures in millimeter — extract_feature_length_mm","text":"length shorter signature millimeters.","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_length_mm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Length of two (aligned) signatures in millimeter — extract_feature_length_mm","text":"","code":"if (FALSE) { library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig)  extract_feature_length(alignment$lands) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract number of matching striation marks from two aligned signatures — extract_feature_matches","title":"Extract number of matching striation marks from two aligned signatures — extract_feature_matches","text":"Extract number matching striation marks two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract number of matching striation marks from two aligned signatures — extract_feature_matches","text":"","code":"extract_feature_matches(striae)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract number of matching striation marks from two aligned signatures — extract_feature_matches","text":"striae data frame striation marks based two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_matches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract number of matching striation marks from two aligned signatures — extract_feature_matches","text":"number matching striation marks","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_matches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract number of matching striation marks from two aligned signatures — extract_feature_matches","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig) striae <- sig_cms_max(alignment) extract_feature_matches(striae$lines) extract_feature_mismatches(striae$lines) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_matches_per_mm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract scaled number of matching striation marks from two aligned signatures — extract_feature_matches_per_mm","title":"Extract scaled number of matching striation marks from two aligned signatures — extract_feature_matches_per_mm","text":"Extract scaled number matching striation marks two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_matches_per_mm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract scaled number of matching striation marks from two aligned signatures — extract_feature_matches_per_mm","text":"","code":"extract_feature_matches_per_mm(striae, aligned, resolution)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_matches_per_mm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract scaled number of matching striation marks from two aligned signatures — extract_feature_matches_per_mm","text":"striae data frame striation marks based two aligned signatures aligned two aligned signatures resolution micron per pixel resolution","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_matches_per_mm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract scaled number of matching striation marks from two aligned signatures — extract_feature_matches_per_mm","text":"scaled number matching striation marks per mm","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_matches_per_mm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract scaled number of matching striation marks from two aligned signatures — extract_feature_matches_per_mm","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig) striae <- sig_cms_max(alignment) extract_feature_matches(striae$lines) extract_feature_mismatches(striae$lines) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_mismatches.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract number of mismatched striation marks from two aligned signatures — extract_feature_mismatches","title":"Extract number of mismatched striation marks from two aligned signatures — extract_feature_mismatches","text":"Extract number mismatched striation marks two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_mismatches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract number of mismatched striation marks from two aligned signatures — extract_feature_mismatches","text":"","code":"extract_feature_mismatches(striae)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_mismatches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract number of mismatched striation marks from two aligned signatures — extract_feature_mismatches","text":"striae data frame striation marks based two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_mismatches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract number of mismatched striation marks from two aligned signatures — extract_feature_mismatches","text":"number mismatched striation marks","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_mismatches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract number of mismatched striation marks from two aligned signatures — extract_feature_mismatches","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig) striae <- sig_cms_max(alignment) extract_feature_matches(striae$lines) extract_feature_mismatches(striae$lines) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_mismatches_per_mm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract number of mismatched striation marks from two aligned signatures — extract_feature_mismatches_per_mm","title":"Extract number of mismatched striation marks from two aligned signatures — extract_feature_mismatches_per_mm","text":"Extract number mismatched striation marks two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_mismatches_per_mm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract number of mismatched striation marks from two aligned signatures — extract_feature_mismatches_per_mm","text":"","code":"extract_feature_mismatches_per_mm(striae, aligned, resolution)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_mismatches_per_mm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract number of mismatched striation marks from two aligned signatures — extract_feature_mismatches_per_mm","text":"striae data frame striation marks based two aligned signatures aligned two aligned signatures resolution micron per pixel resolution","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_mismatches_per_mm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract number of mismatched striation marks from two aligned signatures — extract_feature_mismatches_per_mm","text":"number mismatched striation marks","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_mismatches_per_mm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract number of mismatched striation marks from two aligned signatures — extract_feature_mismatches_per_mm","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig) striae <- sig_cms_max(alignment) extract_feature_matches(striae$lines) extract_feature_mismatches(striae$lines) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_non_cms.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract number of consecutively non-matching striation marks from two aligned signatures — extract_feature_non_cms","title":"Extract number of consecutively non-matching striation marks from two aligned signatures — extract_feature_non_cms","text":"Extract number consecutively non-matching striation marks two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_non_cms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract number of consecutively non-matching striation marks from two aligned signatures — extract_feature_non_cms","text":"","code":"extract_feature_non_cms(striae)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_non_cms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract number of consecutively non-matching striation marks from two aligned signatures — extract_feature_non_cms","text":"striae data frame striation marks based two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_non_cms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract number of consecutively non-matching striation marks from two aligned signatures — extract_feature_non_cms","text":"number consecutively non-matching striation marks","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_non_cms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract number of consecutively non-matching striation marks from two aligned signatures — extract_feature_non_cms","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig) striae <- sig_cms_max(alignment) extract_feature_non_cms(striae$lines) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_non_cms_per_mm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract scaled number of consecutively non-matching striation marks from two aligned signatures — extract_feature_non_cms_per_mm","title":"Extract scaled number of consecutively non-matching striation marks from two aligned signatures — extract_feature_non_cms_per_mm","text":"Extract scaled number consecutively non-matching striation marks two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_non_cms_per_mm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract scaled number of consecutively non-matching striation marks from two aligned signatures — extract_feature_non_cms_per_mm","text":"","code":"extract_feature_non_cms_per_mm(striae, aligned, resolution)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_non_cms_per_mm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract scaled number of consecutively non-matching striation marks from two aligned signatures — extract_feature_non_cms_per_mm","text":"striae data frame striation marks based two aligned signatures aligned two aligned signatures resolution micron per pixel resolution","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_non_cms_per_mm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract scaled number of consecutively non-matching striation marks from two aligned signatures — extract_feature_non_cms_per_mm","text":"scaled number consecutively non-matching striation marks","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_non_cms_per_mm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract scaled number of consecutively non-matching striation marks from two aligned signatures — extract_feature_non_cms_per_mm","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig) striae <- sig_cms_max(alignment) extract_feature_non_cms(striae$lines) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract overlap between two aligned signatures — extract_feature_overlap","title":"Extract overlap between two aligned signatures — extract_feature_overlap","text":"overlap two aligned signatures defined ratio number non-missing overlapping values two aligned signatures length shorter signature. larger overlap indicates higher level agreement signatures.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract overlap between two aligned signatures — extract_feature_overlap","text":"","code":"extract_feature_overlap(aligned)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract overlap between two aligned signatures — extract_feature_overlap","text":"aligned data frame variable x (location) two measurements (bullets entry list returned sig_align)","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract overlap between two aligned signatures — extract_feature_overlap","text":"value 0 1, ratio length overlap compared smaller length signature","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_overlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract overlap between two aligned signatures — extract_feature_overlap","text":"","code":"if (FALSE) { library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig)  extract_feature_overlap(alignment$lands) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_right_cms.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract number of consecutively matching elevated striation marks from the right of two aligned signatures — extract_feature_right_cms","title":"Extract number of consecutively matching elevated striation marks from the right of two aligned signatures — extract_feature_right_cms","text":"Extract number consecutively matching elevated striation marks right two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_right_cms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract number of consecutively matching elevated striation marks from the right of two aligned signatures — extract_feature_right_cms","text":"","code":"extract_feature_right_cms(striae)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_right_cms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract number of consecutively matching elevated striation marks from the right of two aligned signatures — extract_feature_right_cms","text":"striae data frame striation marks based two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_right_cms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract number of consecutively matching elevated striation marks from the right of two aligned signatures — extract_feature_right_cms","text":"number consecutively matching striation marks (right)","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_right_cms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract number of consecutively matching elevated striation marks from the right of two aligned signatures — extract_feature_right_cms","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig) striae <- sig_cms_max(alignment) extract_feature_right_cms(striae$lines) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_rough_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract rough correlation from two (or more) aligned signatures — extract_feature_rough_cor","title":"Extract rough correlation from two (or more) aligned signatures — extract_feature_rough_cor","text":"Extract rough correlation two () aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_rough_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract rough correlation from two (or more) aligned signatures — extract_feature_rough_cor","text":"","code":"extract_feature_rough_cor(aligned)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_rough_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract rough correlation from two (or more) aligned signatures — extract_feature_rough_cor","text":"aligned data frame variable x (location) two measurements","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_rough_cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract rough correlation from two (or more) aligned signatures — extract_feature_rough_cor","text":"(matrix) correlations","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_sd_D.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variation in the height measurements between two aligned signatures — extract_feature_sd_D","title":"Extract variation in the height measurements between two aligned signatures — extract_feature_sd_D","text":"Extract variation height measurements two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_sd_D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variation in the height measurements between two aligned signatures — extract_feature_sd_D","text":"","code":"extract_feature_sd_D(aligned)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_sd_D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variation in the height measurements between two aligned signatures — extract_feature_sd_D","text":"aligned data frame variable x (location) two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_sd_D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract variation in the height measurements between two aligned signatures — extract_feature_sd_D","text":"numeric value","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_sum_peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the combined height of aligned striae between two aligned signatures — extract_feature_sum_peaks","title":"Extract the combined height of aligned striae between two aligned signatures — extract_feature_sum_peaks","text":"Extract combined height aligned striae two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_sum_peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the combined height of aligned striae between two aligned signatures — extract_feature_sum_peaks","text":"","code":"extract_feature_sum_peaks(striae)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_sum_peaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the combined height of aligned striae between two aligned signatures — extract_feature_sum_peaks","text":"striae data frame striation marks based two aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_sum_peaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the combined height of aligned striae between two aligned signatures — extract_feature_sum_peaks","text":"sum heights matching striae","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_feature_sum_peaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the combined height of aligned striae between two aligned signatures — extract_feature_sum_peaks","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig) striae <- sig_cms_max(alignment) extract_feature_sum_peaks(striae$lines) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_features_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract features from aligned signatures — extract_features_all","title":"Extract features from aligned signatures — extract_features_all","text":"Extract features aligned signatures","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_features_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract features from aligned signatures — extract_features_all","text":"","code":"extract_features_all(aligned, striae, resolution, tmpfile = NULL, ...)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_features_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract features from aligned signatures — extract_features_all","text":"aligned aligned signatures, result sig_cms_max striae data frame evaluated matching striae resolution micron per pixel resolution scans tmpfile character consisting path temporary file. NULL, one line appended file time function executed. ... passed extractor functions","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_features_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract features from aligned signatures — extract_features_all","text":"","code":"if (FALSE) { library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig) striae <- sig_cms_max(alignment)  extract_features_all(alignment, striae) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_features_all_legacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract features from aligned signatures (legacy) — extract_features_all_legacy","title":"Extract features from aligned signatures (legacy) — extract_features_all_legacy","text":"Extract features aligned signatures (legacy)","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_features_all_legacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract features from aligned signatures (legacy) — extract_features_all_legacy","text":"","code":"extract_features_all_legacy(res, resolution, tmpfile = NULL)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_features_all_legacy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract features from aligned signatures (legacy) — extract_features_all_legacy","text":"res list consisting data frames lines aligned signatures, result sig_cms_max XXX needs fixing resolution resolution scans taken microns per pixel tmpfile character value consisting path temporary file. NULL, line added file time function executed.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_features_all_legacy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract features from aligned signatures (legacy) — extract_features_all_legacy","text":"data frame variables ccf, rough_cor, D, sd_D, matches, mismatches, cms, non_cms, sum_peaks","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_helper_feature_n_striae.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract information for striation marks from two aligned signatures — extract_helper_feature_n_striae","title":"Extract information for striation marks from two aligned signatures — extract_helper_feature_n_striae","text":"internal function, called multiple extract_feature functions","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_helper_feature_n_striae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract information for striation marks from two aligned signatures — extract_helper_feature_n_striae","text":"","code":"extract_helper_feature_n_striae(striae, type = \"peak\", match = TRUE)"},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_helper_feature_n_striae.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract information for striation marks from two aligned signatures — extract_helper_feature_n_striae","text":"striae data frame striation marks based two aligned signatures type one \"peak\", \"valley\" \"\" match binary setting: TRUE matching striae, FALSE non-matching striae","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_helper_feature_n_striae.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract information for striation marks from two aligned signatures — extract_helper_feature_n_striae","text":"number striae","code":""},{"path":[]},{"path":"https://heike.github.io/bulletxtrctr/reference/extract_helper_feature_n_striae.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract information for striation marks from two aligned signatures — extract_helper_feature_n_striae","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig) striae <- sig_cms_max(alignment) extract_helper_feature_n_striae(striae$lines, type = \"all\", match = T) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/get_ccf.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross correlation function between two vectors — get_ccf","title":"Cross correlation function between two vectors — get_ccf","text":"Calculate lagged correlation numeric vectors x y. Vectors x y assumed captured resolution , similarly, successive values x y assumed equi-distant. Missing values allowed vector, correlations calculated based complete cases.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/get_ccf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross correlation function between two vectors — get_ccf","text":"","code":"get_ccf(x, y, min.overlap = round(0.1 * max(length(x), length(y))))"},{"path":"https://heike.github.io/bulletxtrctr/reference/get_ccf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross correlation function between two vectors — get_ccf","text":"x vector, assumption x longer y y vector min.overlap integer value: minimal number values x y considered?","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/get_ccf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross correlation function between two vectors — get_ccf","text":"list ccf values lags","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/get_ccf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cross correlation function between two vectors — get_ccf","text":"version cross correlation function different stats implementation ccf two ways: consider full region correlations vectors x y specified min.overlap rather just overlap. two vectors can different length (e.g. y just snippet recovered crime scene x full length object lab). use Fourier transformation calculate cross-correlation. makes evaluation slower, prevents edge effects.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/get_ccf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross correlation function between two vectors — get_ccf","text":"","code":"library(dplyr) x <- runif(20) get_ccf(x, lead(x, 5)) #> $lag #>  [1] -18 -17 -16 -15 -14 -13 -12 -11 -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0 #> [20]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18 #>  #> $ccf #>  [1]          NA          NA          NA          NA          NA  1.00000000 #>  [7] -0.71278879  0.73747884 -0.81553757 -0.40332017  0.40602963  0.01703219 #> [13]  0.37985375 -0.41284958 -0.32528179 -0.55644623  0.15730063  0.18121184 #> [19]  0.30569062 -0.22447315 -0.58790382 -0.15320563  0.08106094  1.00000000 #> [25]  0.10985504 -0.04989051 -0.47084961 -0.03283750  0.62469144  0.27733019 #> [31]  0.17847443 -0.60628277 -0.07197082  0.08886414  0.50477083  0.17928673 #> [37] -1.00000000 #>  get_ccf(x, lag(x, 5), min.overlap = 3) #> $lag #>  [1] -17 -16 -15 -14 -13 -12 -11 -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0   1 #> [20]   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17 #>  #> $ccf #>  [1] -0.14545732  0.70441246 -0.52446047 -0.40087762 -0.41598936  0.12376067 #>  [7]  0.41565620  0.17353735 -0.18985838 -0.69158655 -0.02530303  0.10073960 #> [13]  1.00000000  0.20480769 -0.13516059 -0.50532498 -0.36700355  0.30569062 #> [19]  0.18121184  0.15730063 -0.55644623 -0.32528179 -0.41284958  0.37985375 #> [25]  0.01703219  0.40602963 -0.40332017 -0.81553757  0.73747884 -0.71278879 #> [31]          NA          NA          NA          NA          NA #>  x <- runif(100) get_ccf(x[45:50], x, min.overlap = 6) #> $lag #>  [1] -94 -93 -92 -91 -90 -89 -88 -87 -86 -85 -84 -83 -82 -81 -80 -79 -78 -77 -76 #> [20] -75 -74 -73 -72 -71 -70 -69 -68 -67 -66 -65 -64 -63 -62 -61 -60 -59 -58 -57 #> [39] -56 -55 -54 -53 -52 -51 -50 -49 -48 -47 -46 -45 -44 -43 -42 -41 -40 -39 -38 #> [58] -37 -36 -35 -34 -33 -32 -31 -30 -29 -28 -27 -26 -25 -24 -23 -22 -21 -20 -19 #> [77] -18 -17 -16 -15 -14 -13 -12 -11 -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0 #>  #> $ccf #>  [1]  0.748550154 -0.047674378 -0.460038519 -0.185925184  0.754964035 #>  [6]  0.011531413 -0.635501372  0.056527757  0.561974218 -0.743626060 #> [11]  0.001720930  0.190317998  0.661270855 -0.674425046 -0.196502859 #> [16]  0.568160334  0.013621767 -0.487902334  0.492458264 -0.380229213 #> [21]  0.347067625  0.127015886 -0.389416721 -0.206698028  0.423753339 #> [26] -0.051284106 -0.682006660  0.333530816  0.263136113 -0.559043800 #> [31]  0.362198540  0.645897368 -0.118024020 -0.794772736  0.762121993 #> [36]  0.282202458 -0.604902891  0.276824457  0.475978060 -0.896691534 #> [41]  0.055865717  0.622206059 -0.235890127 -0.166695421 -0.408108917 #> [46]  0.426900838  0.411359843 -0.122889597 -0.538335140  0.100507223 #> [51]  1.000000000 -0.244365027 -0.314534171  0.069220830  0.447154686 #> [56] -0.063037672  0.130674716 -0.792678080  0.284160279  0.228151131 #> [61]  0.005378847 -0.925613719  0.823572455 -0.097171428 -0.337984181 #> [66]  0.024846466  0.028884465  0.177797394 -0.555305064  0.553760641 #> [71] -0.330372674  0.177578362  0.203187637 -0.267371096 -0.417195876 #> [76]  0.709702298 -0.527422343 -0.421044196  0.083233734  0.811268195 #> [81] -0.282221953 -0.047584501  0.266370006  0.504874921 -0.602352088 #> [86] -0.202356472  0.479220970 -0.693687782  0.100292971 -0.149798452 #> [91] -0.069943172  0.332179268 -0.215646113  0.121370279 -0.096661556 #>"},{"path":"https://heike.github.io/bulletxtrctr/reference/get_longest_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Length of the longest run of TRUEs — get_longest_run","title":"Length of the longest run of TRUEs — get_longest_run","text":"Identifies length longest run TRUEs Boolean vector x. used maxCMS","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/get_longest_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length of the longest run of TRUEs — get_longest_run","text":"","code":"get_longest_run(x)"},{"path":"https://heike.github.io/bulletxtrctr/reference/get_longest_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length of the longest run of TRUEs — get_longest_run","text":"x Boolean vector","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/get_longest_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of the longest run of TRUEs — get_longest_run","text":"integer value length longest run TRUE values","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/get_longest_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Length of the longest run of TRUEs — get_longest_run","text":"","code":"x <- rbinom(100, size = 1, prob = 1 / 3) get_runs(x == 1) # expected value for longest match is 3 #>  #>  1  2  #> 12  8  get_longest_run(x == 1) #> [1] 2"},{"path":"https://heike.github.io/bulletxtrctr/reference/get_runs.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of the number of runs — get_runs","title":"Table of the number of runs — get_runs","text":"Identify length runs (values TRUE) frequencies.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/get_runs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of the number of runs — get_runs","text":"","code":"get_runs(x)"},{"path":"https://heike.github.io/bulletxtrctr/reference/get_runs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table of the number of runs — get_runs","text":"x Boolean vector","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/get_runs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table of the number of runs — get_runs","text":"table number runs TRUEs","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/get_runs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table of the number of runs — get_runs","text":"","code":"x <- rbinom(100, size = 1, prob = 1 / 3) get_runs(x == 1) # expected value for longest run is 3 #>  #>  1  2  3  4  5  #> 17  4  1  1  1  get_runs(x == 0) # expected value for longest run is 6 #>  #> 1 2 3 4 5 6 7  #> 8 7 3 1 3 1 1"},{"path":"https://heike.github.io/bulletxtrctr/reference/get_sig_lags.html","id":null,"dir":"Reference","previous_headings":"","what":"Get lags between signatures — get_sig_lags","title":"Get lags between signatures — get_sig_lags","text":"Extract lags aligning signatures set respect signature specified 'align_to'. Alignments vary depending signature used alignment.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/get_sig_lags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get lags between signatures — get_sig_lags","text":"","code":"get_sig_lags(   data,   value,   sig_id,   min.overlap = 500,   align_to = levels(sig_id)[1],   resolution = 0.645,   tol = 1e-06 )"},{"path":"https://heike.github.io/bulletxtrctr/reference/get_sig_lags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get lags between signatures — get_sig_lags","text":"data data frame ids signatures, x variable value variable. value symbol signature values sig_id factor variable signatures ids min.overlap value passed ?get_ccf. align_to id signature used alignment. Defaults first factor level. resolution numeric value representing resolution signature microns per pixel. tol tolerance used, .e. smallest value, 1 + tol equal 1. smaller machine's numeric resolution .Machine$double.eps.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/get_sig_lags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get lags between signatures — get_sig_lags","text":"data frame summary (one row level sig_id) containing information id, lag, ccf.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/get_sig_lags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get lags between signatures — get_sig_lags","text":"","code":"if (FALSE) { tmaRks::data(\"toolmarks\", package=\"tmaRks\") tnest <- toolmarks %>% filter(size==\"L\") %>% group_by(side, angle) %>% tidyr::nest() tnest <- tnest %>% mutate(   lags = data %>% purrr::map(.f = get_sig_lags, value=signature,               sig_id=TID, min.overlap=400, resolution = 7.0505e-03) ) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/hamby252demo.html","id":null,"dir":"Reference","previous_headings":"","what":"hamby252demo — hamby252demo","title":"hamby252demo — hamby252demo","text":"Links barrel 1, bullets 1 2, 6 lands.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/hamby252demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hamby252demo — hamby252demo","text":"","code":"hamby252demo"},{"path":"https://heike.github.io/bulletxtrctr/reference/hamby252demo.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"hamby252demo — hamby252demo","text":"list containing lists links 6 lands bullet 1 2","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/hamby252demo_github.html","id":null,"dir":"Reference","previous_headings":"","what":"hamby252demo_github — hamby252demo_github","title":"hamby252demo_github — hamby252demo_github","text":"Links barrel 1, bullets 1 2, 6 lands, mirrored github case NBTRD ","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/hamby252demo_github.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hamby252demo_github — hamby252demo_github","text":"","code":"hamby252demo_github"},{"path":"https://heike.github.io/bulletxtrctr/reference/hamby252demo_github.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"hamby252demo_github — hamby252demo_github","text":"list containing lists links 6 lands bullet 1 2","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/land_cc.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a specified cross section — land_cc","title":"Get a specified cross section — land_cc","text":"Get specified cross section","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/land_cc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a specified cross section — land_cc","text":"","code":"land_cc(y, land)"},{"path":"https://heike.github.io/bulletxtrctr/reference/land_cc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a specified cross section — land_cc","text":"y y coordinate cross section land x3p file land data","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/land_cc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a specified cross section — land_cc","text":"cross cut data frame","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/max_u.html","id":null,"dir":"Reference","previous_headings":"","what":"Wilcox test of bullet to bullet similarity — max_u","title":"Wilcox test of bullet to bullet similarity — max_u","text":"combination land1 land2 key scores, .e. bullet six lands, input vectors length 36.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/max_u.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wilcox test of bullet to bullet similarity — max_u","text":"","code":"max_u(land1, land2, scores, addNA = FALSE)"},{"path":"https://heike.github.io/bulletxtrctr/reference/max_u.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wilcox test of bullet to bullet similarity — max_u","text":"land1 (numeric) vector land ids bullet 1 land2 (numeric) vector land ids bullet 2 scores numeric vector scores summarized single number addNA missing values treated? addNA = TRUE leaves missing values, addNA=FALSE imputes 0.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/max_u.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wilcox test of bullet to bullet similarity — max_u","text":"numeric vector binary prediction whether two lands -source. Vector length input vectors.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/raw_sig_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth the raw signature — raw_sig_smooth","title":"Smooth the raw signature — raw_sig_smooth","text":"Smooth raw signature","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/raw_sig_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth the raw signature — raw_sig_smooth","text":"","code":"raw_sig_smooth(sig, span = 0.03, limits = c(-5, 5))"},{"path":"https://heike.github.io/bulletxtrctr/reference/raw_sig_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth the raw signature — raw_sig_smooth","text":"sig numeric vector raw signature span width smoother, defaults 0.03. XXX limits vector form c(min, max). Results limited values.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/raw_sig_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth the raw signature — raw_sig_smooth","text":"numeric vector length input smoothed signature.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/raw_sig_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooth the raw signature — raw_sig_smooth","text":"","code":"if (FALSE) { library(ggplot2) x <- seq(0, 6 * pi, by = .02) y <- 5.5 * sin(x) + rnorm(length(x))   ggplot() +   geom_point(aes(x = 1:length(y), y = y), shape = 1) +   geom_line(aes(x = 1:length(y), y = smoothloess(y, .05)),     color = \"red\"   ) +   geom_line(aes(x = 1:length(y), y = raw_sig_smooth(y, .05)),     color = \"blue\"   ) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/read_bullet.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading all x3p scans belonging to a single bullet from a folder — read_bullet","title":"Reading all x3p scans belonging to a single bullet from a folder — read_bullet","text":"Read scans specified format folder. operation recursive, .e. also reads scans folder folder.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/read_bullet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading all x3p scans belonging to a single bullet from a folder — read_bullet","text":"","code":"read_bullet(folder = NULL, ext = \".x3p$\", urllist = NULL, size = NA)"},{"path":"https://heike.github.io/bulletxtrctr/reference/read_bullet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading all x3p scans belonging to a single bullet from a folder — read_bullet","text":"folder character describing path folder ext character value, consisting extension(s) describing file format scans urllist list URLs pointing x3p files size specify size reading binary file surface matrix x3p format","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/read_bullet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reading all x3p scans belonging to a single bullet from a folder — read_bullet","text":"data frame two variables, source x3p, containing path file corresponding x3p file","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/read_bullet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reading all x3p scans belonging to a single bullet from a folder — read_bullet","text":"","code":"if (FALSE) { dir.create(\"data\") x3ptools::NRBTDsample_download(\"data\") b1 <- read_bullet(\"data/Bullet1\", \"x3p\") b2 <- read_bullet(\"data/Bullet2\", \"x3p\") on.exit(unlink(\"data\", recursive = T))  b1 <- read_bullet(urllist = hamby252demo[[1]]) b2 <- read_bullet(urllist = hamby252demo[[2]]) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/read_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading all x3p scans belonging to a folder — read_dir","title":"Reading all x3p scans belonging to a folder — read_dir","text":"Read scans specified format folder. operation recursive, .e. also reads scans folder folder.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/read_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading all x3p scans belonging to a folder — read_dir","text":"","code":"read_dir(   path,   extension = \"x3p\",   hierarchy = c(\"land\", \"bullet\", \"barrel\", \"set\") )"},{"path":"https://heike.github.io/bulletxtrctr/reference/read_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading all x3p scans belonging to a folder — read_dir","text":"path character describing path folder extension character value, consisting extension(s) describing file format scans hierarchy vector characters describing folder structure, starting lowest level highest.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/read_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reading all x3p scans belonging to a folder — read_dir","text":"data frame x3p files appropriate meta information","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/rtrees.html","id":null,"dir":"Reference","previous_headings":"","what":"randomforest — rtrees","title":"randomforest — rtrees","text":"randomforest fitted predict known matches non-matches scans land engraved areas Hamby study (see Hare et al ).","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/rtrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"randomforest — rtrees","text":"","code":"rtrees"},{"path":"https://heike.github.io/bulletxtrctr/reference/rtrees.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"randomforest — rtrees","text":"random forest object fitted randomforest function package name","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/runExample.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute the Shiny App for bullet investigation — runExample","title":"Execute the Shiny App for bullet investigation — runExample","text":"shiny app expect tibble object called shiny.tt user's working environment.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/runExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute the Shiny App for bullet investigation — runExample","text":"","code":"runExample()"},{"path":"https://heike.github.io/bulletxtrctr/reference/runExample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute the Shiny App for bullet investigation — runExample","text":"shiny.tt variables: x3p, scan_id, crosscut, ccdata, grooves. shiny app run properly, shiny.tt least include grooves variable","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/runExample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute the Shiny App for bullet investigation — runExample","text":"","code":"if (FALSE) { bulletxtrctr::runExample() }"},{"path":"https://heike.github.io/bulletxtrctr/reference/sig_align.html","id":null,"dir":"Reference","previous_headings":"","what":"Align two surface cross cuts according to maximal correlation — sig_align","title":"Align two surface cross cuts according to maximal correlation — sig_align","text":"bullet first name serves reference, second bullet shifted.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/sig_align.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align two surface cross cuts according to maximal correlation — sig_align","text":"","code":"sig_align(sig1, sig2, min.overlap = NULL)"},{"path":"https://heike.github.io/bulletxtrctr/reference/sig_align.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align two surface cross cuts according to maximal correlation — sig_align","text":"sig1 vector first signature sig2 vector second signature min.overlap additional parameter passed get_ccf","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/sig_align.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align two surface cross cuts according to maximal correlation — sig_align","text":"list consisting ) maximal cross correlation, b) lag resulting highest cross correlation, c) data frame input, y vectors aligned maximal correlation d) vector cross-correlation values","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/sig_align.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align two surface cross cuts according to maximal correlation — sig_align","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  sig_align(example_data$sigs[[1]]$sig, example_data$sigs[[2]]$sig) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/sig_cms_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the number of maximum CMS between two signatures — sig_cms_max","title":"Identify the number of maximum CMS between two signatures — sig_cms_max","text":"adapted bulletGetMaxCMS aligns two signatures, identifies peaks valleys, matches striae, counts longest run.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/sig_cms_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the number of maximum CMS between two signatures — sig_cms_max","text":"","code":"sig_cms_max(aligned, span = 35)"},{"path":"https://heike.github.io/bulletxtrctr/reference/sig_cms_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the number of maximum CMS between two signatures — sig_cms_max","text":"aligned data frame location aligned signatures span positive number  smoothfactor use assessing peaks.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/sig_cms_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify the number of maximum CMS between two signatures — sig_cms_max","text":"list matching parameters, data set identified striae, aligned data sets.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/sig_cms_max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify the number of maximum CMS between two signatures — sig_cms_max","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools)  example_data <- bullet_pipeline(   location = list(     Bullet1 = c(hamby252demo$bullet1[2]),     Bullet2 = c(hamby252demo$bullet2[4])   ),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  alignment <- sig_align(example_data$sigs[[1]]$sig,                        example_data$sigs[[2]]$sig) striae <- sig_cms_max(alignment) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/sig_get_peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the location and the depth of peaks and valleys in a signature — sig_get_peaks","title":"Identify the location and the depth of peaks and valleys in a signature — sig_get_peaks","text":"Adapted function get_peaks","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/sig_get_peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the location and the depth of peaks and valleys in a signature — sig_get_peaks","text":"","code":"sig_get_peaks(   sig,   smoothfactor = 35,   striae = TRUE,   window = TRUE,   plot = TRUE )"},{"path":"https://heike.github.io/bulletxtrctr/reference/sig_get_peaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the location and the depth of peaks and valleys in a signature — sig_get_peaks","text":"sig numeric vector smoothed signature, padded NAs front /back. smoothfactor set default 35. Smaller values pick smaller changes crosscut. striae TRUE, show detected striae plot window TRUE, show window striae plot plot TRUE, show plot","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/sig_get_peaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify the location and the depth of peaks and valleys in a signature — sig_get_peaks","text":"list several objects:","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/sig_get_peaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify the location and the depth of peaks and valleys in a signature — sig_get_peaks","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools) library(ggplot2)  example_data <- bullet_pipeline(   location = list(Bullet1 = c(hamby252demo$bullet1[3])),   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  sig <- cc_get_signature(example_data$ccdata[[1]], example_data$grooves[[1]]) sig_peaks <- sig_get_peaks(sig$sig) sig_peaks[1:6] # Plot sig_peaks$plot }"},{"path":"https://heike.github.io/bulletxtrctr/reference/smoothloess.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict smooth from a fit — smoothloess","title":"Predict smooth from a fit — smoothloess","text":"Predict smooth fit","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/smoothloess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict smooth from a fit — smoothloess","text":"","code":"smoothloess(y, span)"},{"path":"https://heike.github.io/bulletxtrctr/reference/smoothloess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict smooth from a fit — smoothloess","text":"y numeric vector span span loess fit","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/smoothloess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict smooth from a fit — smoothloess","text":"","code":"if (FALSE) { library(ggplot2) x <- seq(0, 6 * pi, by = .02) y <- 5.5 * sin(x) + rnorm(length(x))   ggplot() +   geom_point(aes(x = 1:length(y), y = y), shape = 1) +   geom_line(aes(x = 1:length(y), y = smoothloess(y, .05)),     color = \"red\"   ) +   geom_line(aes(x = 1:length(y), y = raw_sig_smooth(y, .05)),     color = \"blue\"   ) }"},{"path":"https://heike.github.io/bulletxtrctr/reference/striation_identify_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Match striation marks across two aligned signatures — striation_identify_matches","title":"Match striation marks across two aligned signatures — striation_identify_matches","text":"striae1 striae2 data frames previously identified peaks valleys returned sig_get_peaks","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/striation_identify_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match striation marks across two aligned signatures — striation_identify_matches","text":"","code":"striation_identify_matches(striae1, striae2)"},{"path":"https://heike.github.io/bulletxtrctr/reference/striation_identify_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match striation marks across two aligned signatures — striation_identify_matches","text":"striae1 data frame returned sig_get_peaks function. data frames expected following variables: xmin, xmax, group, type, bullet, heights striae2 data frame returned sig_get_peaks function. data frames expected following variables: xmin, xmax, group, type, bullet, heights#' Check striae object valid","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/striation_identify_matches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match striation marks across two aligned signatures — striation_identify_matches","text":"data frame form lines1 lines2, additional variable whether striation marks matches","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/striation_identify_matches.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match striation marks across two aligned signatures — striation_identify_matches","text":"adapted function striation_identify bulletr package, just used internally. intended public consumption.","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/switch_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch x and y in a data frame — switch_xy","title":"Switch x and y in a data frame — switch_xy","text":"Used relable x3ps","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/switch_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch x and y in a data frame — switch_xy","text":"","code":"switch_xy(dataframe)"},{"path":"https://heike.github.io/bulletxtrctr/reference/switch_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch x and y in a data frame — switch_xy","text":"dataframe data frame columns x y","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/switch_xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Switch x and y in a data frame — switch_xy","text":"dataframe","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/x3p_crosscut.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a crosscut from a 3d surface file — x3p_crosscut","title":"Read a crosscut from a 3d surface file — x3p_crosscut","text":"Read crosscut 3d surface file","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/x3p_crosscut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a crosscut from a 3d surface file — x3p_crosscut","text":"","code":"x3p_crosscut(x3p, y = NULL, range = 1e-05)"},{"path":"https://heike.github.io/bulletxtrctr/reference/x3p_crosscut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a crosscut from a 3d surface file — x3p_crosscut","text":"x3p character, path x3p file. Otherwise scan x3p format expected. y level crosscut taken. level exist, crosscut along middle land returned. range numeric specifying range (y, y + range) extracted","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/x3p_crosscut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a crosscut from a 3d surface file — x3p_crosscut","text":"data frame","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/x3p_crosscut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a crosscut from a 3d surface file — x3p_crosscut","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools) library(ggplot2)  example_data <- bullet_pipeline(   location = list(Bullet1 = c(hamby252demo$bullet1[3])),   stop_at_step = \"clean\",   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  x3p_crosscut_optimize(example_data$x3p[[1]]) x3p_crosscut(example_data$x3p[[1]], 75) %>%   ggplot(aes(x = x, y = value)) + geom_line() }"},{"path":"https://heike.github.io/bulletxtrctr/reference/x3p_crosscut_optimize.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify a reliable cross section — x3p_crosscut_optimize","title":"Identify a reliable cross section — x3p_crosscut_optimize","text":"Identifies \"representative\" cross section bullet land engraved area. Striation marks bullet land best expressed heel (bottom) bullet break-still problematic. Using cross-correlation identify cross section closest bottom bullet suffer break-. resulting cross section equal maximum search area (defined xlimits), investigation determine whether cross section usable, due risk tank rash. TODO: missing values right hand side (leading shoulder)?","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/x3p_crosscut_optimize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify a reliable cross section — x3p_crosscut_optimize","text":"","code":"x3p_crosscut_optimize(   x3p,   distance = 25,   ylimits = c(50, NA),   minccf = 0.9,   span = 0.03,   percent_missing = 50 )"},{"path":"https://heike.github.io/bulletxtrctr/reference/x3p_crosscut_optimize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify a reliable cross section — x3p_crosscut_optimize","text":"x3p character, path x3p file. Otherwise scan x3p format expected. assumption scan taken across bullet land, upright bullet, .e.  heel along x y = 0. (0,0) defines bottom left corner scan. distance positive numeric value indicating distance cross sections use comparison ylimits vector values check cross sections stable region. case upper limit specified explicitly, determined scan . minccf minimal value cross correlation indicate stable region span span loess smooth function percent_missing maximum percent missing values allowed crosscut picked","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/x3p_crosscut_optimize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify a reliable cross section — x3p_crosscut_optimize","text":"dataframe crosscut","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/x3p_crosscut_optimize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify a reliable cross section — x3p_crosscut_optimize","text":"","code":"if (FALSE) { # Set the data up to be read in, cleaned, etc. library(bulletxtrctr) library(x3ptools) library(ggplot2)  example_data <- bullet_pipeline(   location = list(Bullet1 = c(hamby252demo$bullet1[3])),   stop_at_step = \"clean\",   x3p_clean = function(x) x %>%       x3p_scale_unit(scale_by=10^6) %>%       rotate_x3p(angle = -90) %>%       y_flip_x3p() )  x3p_crosscut_optimize(example_data$x3p[[1]]) x3p_crosscut(example_data$x3p[[1]], 75) %>%   ggplot(aes(x = x, y = value)) + geom_line() }"},{"path":"https://heike.github.io/bulletxtrctr/reference/x3pheader_to_microns.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert x3p header information to microns from meters — x3pheader_to_microns","title":"Convert x3p header information to microns from meters — x3pheader_to_microns","text":"Convert x3p header information microns meters","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/x3pheader_to_microns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert x3p header information to microns from meters — x3pheader_to_microns","text":"","code":"x3pheader_to_microns(x3p)"},{"path":"https://heike.github.io/bulletxtrctr/reference/x3pheader_to_microns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert x3p header information to microns from meters — x3pheader_to_microns","text":"x3p x3p data read using read_x3p read_bullet","code":""},{"path":"https://heike.github.io/bulletxtrctr/reference/x3pheader_to_microns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert x3p header information to microns from meters — x3pheader_to_microns","text":"x3p header information microns","code":""},{"path":"https://heike.github.io/bulletxtrctr/news/index.html","id":"bulletxtrctr-020","dir":"Changelog","previous_headings":"","what":"bulletxtrctr 0.2.0","title":"bulletxtrctr 0.2.0","text":"Added NEWS.md file track changes package.","code":""}]
